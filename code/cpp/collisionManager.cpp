//=============================================================================
// 当たり判定管理クラス
//=============================================================================

//=============================================================================
// インクルードファイル
//=============================================================================
#include "main.h"
#include "renderer.h"
#include "collisionManager.h"
#include "collision.h"

//=============================================================================
// グローバル変数
//=============================================================================
CCollisionManager* CCollisionManager::Instance = NULL;	//インスタンス

//=============================================================================
// クラスの生成
//=============================================================================
CCollisionManager::CCollisionManager()
{
	m_List.clear();
	m_ReleaseList.clear();
}

//=============================================================================
// クラスの破棄
//=============================================================================
CCollisionManager::~CCollisionManager()
{

}

//=============================================================================
// すべての解放
//=============================================================================
void CCollisionManager::UninitAll(void)
{
	for each (auto list in m_List)
	{
		list->Uninit();
		delete list;
	}
	m_List.clear();
	m_ReleaseList.clear();
}

//=============================================================================
// すべての更新
//=============================================================================
void CCollisionManager::UpdateAll(void)
{
	ReleaseList();
	for each (auto list in m_List)
	{
		list->Transformation();
		list->Update();
	}
}

//=============================================================================
// すべての描画
//=============================================================================
void CCollisionManager::DrawAll(void)
{
	for each (auto list in m_List)
	{
		list->Draw();
	}
}

//=============================================================================
//  削除登録
//=============================================================================
void CCollisionManager::Release(CCollision* Collision)
{
	m_ReleaseList.push_back(Collision);
}

//=============================================================================
// 登録されたものを削除
//=============================================================================
void CCollisionManager::ReleaseList(void)
{
	for each (auto list in m_ReleaseList)
	{
		for (auto itr = m_List.begin(); itr != m_List.end(); itr++)
		{
			if (list == (*itr))
			{
				itr = m_List.erase(itr);
				list->Uninit();
				delete list;
				break;
			}
		}
	}
	m_ReleaseList.clear();
}