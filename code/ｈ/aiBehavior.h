//=============================================================================
// プレイヤーの行動
//=============================================================================
#pragma once

//=============================================================================
// インクルードファイル
//=============================================================================
#include "behavior.h"

//=============================================================================
// 前方宣言
//=============================================================================
class CObject;
class CAiState;

typedef enum
{
	AISTATE_NONE = 0,
	AISTATE_STOP,
	AISTATE_MOVEMENT,
	AISTATE_ATTACK,
}AISTATE;

//=============================================================================
// クラスの定義
//=============================================================================
class CAiBehavior : public CBehavior
{
public:

	//コンストラクタ・デストラクタ
	//=============================================================================
	CAiBehavior();
	~CAiBehavior();

	//継承したすべてのオブジェクトに対して行う関数
	//=============================================================================
	void Init(float Size);
	void Uninit(void);
	void Update(void);

	//衝突
	//=============================================================================
	void CollisionTrigger(CObject* Object);		//衝突時
	void CollisionEnter(CObject* Object);		//衝突継続時
	void CollisionRelease(CObject* Object);		//衝突終了時

	//変数
	//=============================================================================
	CObject* m_Player;
	CAiState* m_AiState;

	//シェーダの検索、取得
	template<class Class, class _Class>
	static Class* Find(list<_Class> List)
	{
		for each (auto list in List)
		{
			if (typeid((*list)) != typeid(Class)) continue;
			return (Class*)list;
		}
	}

private:
	//変数
	//=============================================================================
	AISTATE m_State;
	float m_Size;
};