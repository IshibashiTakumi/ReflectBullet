//=============================================================================
// Behavior基底クラス
//=============================================================================
#pragma once

//=============================================================================
// 前方宣言
//=============================================================================
class CObject;

//=============================================================================
// クラスの定義
//=============================================================================
class CBehavior
{
public:

	//コンストラクタ・デストラクタ
	//=============================================================================
	CBehavior();
	~CBehavior();

	//基本関数
	//=============================================================================
	virtual void Init(void) { };		//初期化
	virtual void Uninit(void) = 0;		//解放
	virtual void Update(void) = 0;		//更新
	virtual void Transformation(void) {};	//位置修正

	//破棄
	//=============================================================================
	virtual void Release(void);			//単体

	//設定・取得関数
	//=============================================================================
	CObject* GetObj(void) { return m_Object; };	//オブジェクト

	//衝突
	//=============================================================================
	virtual void CollisionEnter(CObject* Object) {};	//衝突時
	virtual void CollisionTrigger(CObject* Object) {};	//衝突継続時
	virtual void CollisionRelease(CObject* Object) {};	//衝突終了時

	//生成関数
	//=============================================================================
	template<class Class, class ...Argument>
	static CBehavior* Create(Argument ...argument)
	{
		Class* Behavior = new Class();
		Behavior->Init(argument...);
		return Behavior;
	}
	CObject* m_Object;	//オブジェクト
protected:
	//変数
	//=============================================================================
	//CObject* m_Object;	//オブジェクト

private:
	//CObjectで呼び出すための処理(friend)
	//=============================================================================
	friend static void SetObject(CBehavior* Behavior, CObject* Object) { Behavior->m_Object = Object; }
};