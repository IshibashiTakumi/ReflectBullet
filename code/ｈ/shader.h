//=============================================================================
// Shader基底クラス
//=============================================================================
#pragma once

//=============================================================================
// マクロ定義
//=============================================================================
namespace directory
{
	static const string Shader_Directory = "./data/SHADER/";
}

//=============================================================================
// クラスの定義
//=============================================================================
class CShader
{
public:
	//コンストラクタ・デストラクタ
	//=============================================================================
	CShader();
	~CShader();

	//基本関数
	//=============================================================================
	void Init(string& FileName);	//初期化
	void Uninit(void);	//解放
	virtual void Begin(void);	//描画開始
	virtual void End(void);		//描画終了

	//取得関数
	//=============================================================================
	ID3DXEffect* Get(void) { return m_Effect; }

	//生成関数
	//=============================================================================
	template<class Class>
	static Class* Create(string& FileName)
	{
		Class* Shader = new Class();
		Shader->Init(FileName);
		return Shader;
	}

protected:
	//変数
	//=============================================================================
	ID3DXEffect *m_Effect;
	ID3DXBuffer *m_Error;
};