//=============================================================================
// カメラの管理
//=============================================================================
#pragma once

//=============================================================================
// インクルードファイル
//=============================================================================

//=============================================================================
// マクロ定義
//=============================================================================

//=============================================================================
// 構造体
//=============================================================================

//=============================================================================
// 前方宣言
//=============================================================================
class CInput;
class CCamera;

//=============================================================================
// クラスの定義
//=============================================================================
class CCameraManager
{
public:
	//インスタンスを返す
	static CCameraManager* GetInstance() { return Instance == NULL ? Instance = new CCameraManager() : Instance; };
	void UninitAll(void);
	void UpdateAll(void);
	void SetCamera(void);
	void SelectCamera(CCamera* Camera);
	void SetList(CCamera* Camera) { m_List.push_back(Camera); m_Camera = Camera; }
	list<CCamera*> GetList(void) { return m_List; }
	CCamera* GetCamera(void) { return m_Camera; }
private:
	static CCameraManager *Instance;	//インスタンス

	//コンストラクタ・デストラクタ
	//=============================================================================
	CCameraManager();
	~CCameraManager();

	//変数
	//=============================================================================
	list<CCamera*> m_List;
	CCamera* m_Camera;
};